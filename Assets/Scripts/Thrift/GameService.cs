/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class GameService {
  public interface Iface {
    void publishCommand(PublishCommandRequest publishCommandReq);
    #if SILVERLIGHT
    IAsyncResult Begin_publishCommand(AsyncCallback callback, object state, PublishCommandRequest publishCommandReq);
    void End_publishCommand(IAsyncResult asyncResult);
    #endif
    FlushCommandsResponse flushCommands(FlushCommandsRequest flushCommandsReq);
    #if SILVERLIGHT
    IAsyncResult Begin_flushCommands(AsyncCallback callback, object state, FlushCommandsRequest flushCommandsReq);
    FlushCommandsResponse End_flushCommands(IAsyncResult asyncResult);
    #endif
    long registerToGameSession(string clientId);
    #if SILVERLIGHT
    IAsyncResult Begin_registerToGameSession(AsyncCallback callback, object state, string clientId);
    long End_registerToGameSession(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_publishCommand(AsyncCallback callback, object state, PublishCommandRequest publishCommandReq)
    {
      return send_publishCommand(callback, state, publishCommandReq);
    }

    public void End_publishCommand(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_publishCommand();
    }

    #endif

    public void publishCommand(PublishCommandRequest publishCommandReq)
    {
      #if !SILVERLIGHT
      send_publishCommand(publishCommandReq);
      recv_publishCommand();

      #else
      var asyncResult = Begin_publishCommand(null, null, publishCommandReq);
      End_publishCommand(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_publishCommand(AsyncCallback callback, object state, PublishCommandRequest publishCommandReq)
    #else
    public void send_publishCommand(PublishCommandRequest publishCommandReq)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("publishCommand", TMessageType.Call, seqid_));
      publishCommand_args args = new publishCommand_args();
      args.PublishCommandReq = publishCommandReq;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_publishCommand()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      publishCommand_result result = new publishCommand_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_flushCommands(AsyncCallback callback, object state, FlushCommandsRequest flushCommandsReq)
    {
      return send_flushCommands(callback, state, flushCommandsReq);
    }

    public FlushCommandsResponse End_flushCommands(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_flushCommands();
    }

    #endif

    public FlushCommandsResponse flushCommands(FlushCommandsRequest flushCommandsReq)
    {
      #if !SILVERLIGHT
      send_flushCommands(flushCommandsReq);
      return recv_flushCommands();

      #else
      var asyncResult = Begin_flushCommands(null, null, flushCommandsReq);
      return End_flushCommands(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_flushCommands(AsyncCallback callback, object state, FlushCommandsRequest flushCommandsReq)
    #else
    public void send_flushCommands(FlushCommandsRequest flushCommandsReq)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("flushCommands", TMessageType.Call, seqid_));
      flushCommands_args args = new flushCommands_args();
      args.FlushCommandsReq = flushCommandsReq;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public FlushCommandsResponse recv_flushCommands()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      flushCommands_result result = new flushCommands_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "flushCommands failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_registerToGameSession(AsyncCallback callback, object state, string clientId)
    {
      return send_registerToGameSession(callback, state, clientId);
    }

    public long End_registerToGameSession(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerToGameSession();
    }

    #endif

    public long registerToGameSession(string clientId)
    {
      #if !SILVERLIGHT
      send_registerToGameSession(clientId);
      return recv_registerToGameSession();

      #else
      var asyncResult = Begin_registerToGameSession(null, null, clientId);
      return End_registerToGameSession(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerToGameSession(AsyncCallback callback, object state, string clientId)
    #else
    public void send_registerToGameSession(string clientId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("registerToGameSession", TMessageType.Call, seqid_));
      registerToGameSession_args args = new registerToGameSession_args();
      args.ClientId = clientId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_registerToGameSession()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerToGameSession_result result = new registerToGameSession_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerToGameSession failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["publishCommand"] = publishCommand_Process;
      processMap_["flushCommands"] = flushCommands_Process;
      processMap_["registerToGameSession"] = registerToGameSession_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void publishCommand_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      publishCommand_args args = new publishCommand_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      publishCommand_result result = new publishCommand_result();
      iface_.publishCommand(args.PublishCommandReq);
      oprot.WriteMessageBegin(new TMessage("publishCommand", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void flushCommands_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      flushCommands_args args = new flushCommands_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      flushCommands_result result = new flushCommands_result();
      result.Success = iface_.flushCommands(args.FlushCommandsReq);
      oprot.WriteMessageBegin(new TMessage("flushCommands", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerToGameSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerToGameSession_args args = new registerToGameSession_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerToGameSession_result result = new registerToGameSession_result();
      result.Success = iface_.registerToGameSession(args.ClientId);
      oprot.WriteMessageBegin(new TMessage("registerToGameSession", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class publishCommand_args : TBase
  {
    private PublishCommandRequest _publishCommandReq;

    public PublishCommandRequest PublishCommandReq
    {
      get
      {
        return _publishCommandReq;
      }
      set
      {
        __isset.publishCommandReq = true;
        this._publishCommandReq = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool publishCommandReq;
    }

    public publishCommand_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                PublishCommandReq = new PublishCommandRequest();
                PublishCommandReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("publishCommand_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PublishCommandReq != null && __isset.publishCommandReq) {
          field.Name = "publishCommandReq";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          PublishCommandReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("publishCommand_args(");
      bool __first = true;
      if (PublishCommandReq != null && __isset.publishCommandReq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublishCommandReq: ");
        __sb.Append(PublishCommandReq== null ? "<null>" : PublishCommandReq.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class publishCommand_result : TBase
  {

    public publishCommand_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("publishCommand_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("publishCommand_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class flushCommands_args : TBase
  {
    private FlushCommandsRequest _flushCommandsReq;

    public FlushCommandsRequest FlushCommandsReq
    {
      get
      {
        return _flushCommandsReq;
      }
      set
      {
        __isset.flushCommandsReq = true;
        this._flushCommandsReq = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool flushCommandsReq;
    }

    public flushCommands_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                FlushCommandsReq = new FlushCommandsRequest();
                FlushCommandsReq.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("flushCommands_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (FlushCommandsReq != null && __isset.flushCommandsReq) {
          field.Name = "flushCommandsReq";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          FlushCommandsReq.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("flushCommands_args(");
      bool __first = true;
      if (FlushCommandsReq != null && __isset.flushCommandsReq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FlushCommandsReq: ");
        __sb.Append(FlushCommandsReq== null ? "<null>" : FlushCommandsReq.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class flushCommands_result : TBase
  {
    private FlushCommandsResponse _success;

    public FlushCommandsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public flushCommands_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FlushCommandsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("flushCommands_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("flushCommands_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerToGameSession_args : TBase
  {
    private string _clientId;

    public string ClientId
    {
      get
      {
        return _clientId;
      }
      set
      {
        __isset.clientId = true;
        this._clientId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool clientId;
    }

    public registerToGameSession_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ClientId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerToGameSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ClientId != null && __isset.clientId) {
          field.Name = "clientId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerToGameSession_args(");
      bool __first = true;
      if (ClientId != null && __isset.clientId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientId: ");
        __sb.Append(ClientId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerToGameSession_result : TBase
  {
    private long _success;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public registerToGameSession_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerToGameSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerToGameSession_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
