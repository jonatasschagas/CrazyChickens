using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;

/// <summary>
/// Handles the creation of the grid. Manages the PathFinding.
/// </summary>
public class MapGenerator : MonoBehaviour {

	public Transform[] obstaclePrefabs;
	public Transform tilePrefab;
	public Vector2 mapSize;
	public GameObject pathFindingGrid;

	/// <summary>
	/// Holds all the Tiles in the scene
	/// </summary>
	private List<Coord> allTileCoords;

	[Range(0,1)]
	public float outlinePercent;
	[Range(0.0f,25.0f)]
	public float tileSize = 1.0f;

	private Vector3 firstTilePos;
	private Vector3 lastTilePos;

	// Pathfinder algorithm
	private PathFinder pathFinder;

	void Start() {
		GenerateMap ();
		pathFinder = new PathFinder (allTileCoords, (int)mapSize.x, (int)mapSize.y);
	}

	/// <summary>
	/// Generates the map.
	/// </summary>
	public void GenerateMap() {

		allTileCoords = new List<Coord> ();

		string holderName = "Generated Map";
		if (transform.FindChild (holderName)) {
			DestroyImmediate (transform.FindChild(holderName).gameObject);
		}

		Transform mapHolder = new GameObject (holderName).transform;
		mapHolder.parent = transform;

		for (int x = 0; x < mapSize.x; x++) {
			for (int y = 0; y < mapSize.y; y++) {
				Vector3 tilePosition = CoordToPosition (x,y);
				Transform newTile = Instantiate (tilePrefab, tilePosition, Quaternion.Euler (Vector3.right * 90)) as Transform;
				newTile.localScale = GetTileSize();
				newTile.parent = mapHolder;
		
				// generating obstacle
				if (y % 2 != 0 && x > 0 && x % 2 != 0 && x < mapSize.x - 1) {
					Transform obstacle = Instantiate (obstaclePrefabs[UnityEngine.Random.Range(0,3)], Vector3.zero, 
						                     Quaternion.Euler (Vector3.right * 90)) as Transform;
					obstacle.localScale = GetTileSize ();
					obstacle.transform.position = tilePosition + Vector3.up * 0.5f * tileSize;
					obstacle.parent = mapHolder;
					allTileCoords.Add (new Coord (x,y,TILE_TYPE.WALL,obstacle));
				} else {
					allTileCoords.Add (new Coord (x,y,TILE_TYPE.GROUND,newTile));
				}
			}
		}

		firstTilePos = CoordToPosition(0, 0);
		lastTilePos = CoordToPosition((int)mapSize.x - 1, (int)mapSize.y - 1);
	}

	/// <summary>
	/// Reads the tile coordinates and returns a Vector3 position
	/// </summary>
	/// <returns>The to position.</returns>
	/// <param name="x">The x coordinate.</param>
	/// <param name="y">The y coordinate.</param>
	public Vector3 CoordToPosition(int x, int y) {
		return new Vector3 (-mapSize.x / 2 + 0.5f + x, 0, -mapSize.y / 2 + 0.5f + y) * tileSize;
	}

	/// <summary>
	/// Converts the Unity Vector3 Position to tile coordinates
	/// </summary>
	/// <returns>The to coordinate.</returns>
	/// <param name="position">Position.</param>
	public Coord PositionToCoord(Vector3 position) {
		float offsetX = ((mapSize.x - 1.0f) * tileSize) / 2.0f;
		float offsetY = ((mapSize.y - 1.0f) * tileSize) / 2.0f;
		int coordX = Mathf.RoundToInt((position.x + offsetX) / tileSize);
		int coordY = Mathf.RoundToInt((position.z + offsetY) / tileSize);
		return allTileCoords[coordX * (int)mapSize.y + coordY ];
	}

	public enum TileDirection {
		TILE_UP,
		TILE_DOWN,
		TILE_LEFT,
		TILE_RIGHT
	};

	public Vector3 GetPositionNeightborTile(Vector3 position, TileDirection tileDirection) {
		Coord coord = PositionToCoord (position);
		if (coord != null) {
			switch (tileDirection) {
			case TileDirection.TILE_UP:
				coord.y++;
				if (coord.y < (int)mapSize.y) {
					return CoordToPosition (coord.x, coord.y);
				}
				break;
			case TileDirection.TILE_DOWN:
				coord.y--;
				if (coord.y >= 0) {
					return CoordToPosition (coord.x, coord.y);
				}
				break;
			case TileDirection.TILE_RIGHT:
				coord.x++;
				if (coord.x < (int)mapSize.x) {
					return CoordToPosition (coord.x, coord.y);
				}
				break;
			case TileDirection.TILE_LEFT:
				coord.x--;
				if (coord.x >= 0) {
					return CoordToPosition (coord.x, coord.y);
				}
				break;
			}
		}
		return Vector3.zero;
	}

	/// <summary>
	/// Returns the Unity Vector3 position right in the center of the tile
	/// </summary>
	/// <returns>The tile aligned position.</returns>
	/// <param name="position">Position.</param>
	public Vector3 GetTileAlignedPosition(Vector3 position) {
		Coord currentCord = PositionToCoord (position);
		return CoordToPosition(currentCord.x, currentCord.y);
	}

	/// <summary>
	/// Returns the path generated by the pathfinding algorithm
	/// </summary>
	/// <returns>The next path.</returns>
	/// <param name="currentPosition">Current position.</param>
	/// <param name="prevDirection">Previous direction.</param>
	/// <param name="direction">Direction.</param>
	public List<Vector3> GetNextPath(Vector3 currentPosition, Vector3 prevDirection, Vector3 direction) {

		if (direction != Vector3.zero) {

			Coord currentCord = PositionToCoord (currentPosition);
			// adjusting the direction to go based on the position of the character
			if (direction == Vector3.forward || direction == Vector3.back) {
				if (prevDirection == Vector3.left && currentCord.x % 2 != 0) {
					currentCord.x--;
				} else if (prevDirection == Vector3.right && currentCord.x % 2 != 0) {
					currentCord.x++;
				} 
			} else if (direction == Vector3.left || direction == Vector3.right) {
				if (prevDirection == Vector3.forward && currentCord.y % 2 != 0) {
					currentCord.y++;
				} else if (prevDirection == Vector3.back && currentCord.y % 2 != 0) {
					currentCord.y--;
				} 
			}

			// after the coordinates were modified, converts them to vector3 again
			currentPosition = CoordToPosition(currentCord.x, currentCord.y);

			// define the destination for the player (usually the last tile of the direction the player
			// turned to
			if (direction != Vector3.zero) {
				if (direction == Vector3.forward) {
					currentPosition.z = lastTilePos.z;
				} else if (direction == Vector3.back) {
					currentPosition.z = firstTilePos.z;
				} else if (direction == Vector3.left) {
					currentPosition.x = firstTilePos.x;
				} else if (direction == Vector3.right) {
					currentPosition.x = lastTilePos.x;
				}
			}

			// calculating the path finding
			float now = Time.time;
			List<Coord> path = CalculatePath (currentCord, PositionToCoord (currentPosition));
			List<Vector3> pathPositions = new List<Vector3> ();
			foreach (Coord coord in path) {
				pathPositions .Add(CoordToPosition(coord.x, coord.y));
			}

			return pathPositions;
		}
		return null;
	}

	public bool IsBetweenWallsHorizontal(Vector3 position) {
		Coord coord = PositionToCoord (position);
		return coord.y % 2 != 0;
	}

	public bool IsBetweenWallsVertical(Vector3 position) {
		Coord coord = PositionToCoord (position);
		return coord.x % 2 != 0;
	}

	/// <summary>
	/// Calculates the pathfinding
	/// </summary>
	/// <returns>The path.</returns>
	/// <param name="startCoord">Start coordinate.</param>
	/// <param name="destinationCoord">Destination coordinate.</param>
	private List<Coord> CalculatePath(Coord startCoord, Coord destinationCoord) {
		return pathFinder.FindPath (startCoord, destinationCoord);
	}

	Vector3 GetTileSize() {
		return Vector3.one * (1 - outlinePercent) * tileSize;
	}

}
